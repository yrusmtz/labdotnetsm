@page "/security/RolesporUsuario"
@using LoginShared
@inject UserRoleService UserRoleService
@inject RoleService RoleService
@inject UserService UserService
@using System.Net
@using LoginBlazor2.Security.Services
@using LoginShared.Security.DTOs
@inject NavigationManager NavigationManager


<div class="content__header content__boxed rounded-0 blue-background">
    <div class="content__wrap">

        <!-- Project name and information -->
        <h1 class="page-title d-flex flex-wrap align-items-center justify-content-center mb-2 mt-4">Asignar Roles a Usuario</h1>
        <p class="text-center">Asigne un rol a un usuario específico utilizando los siguientes selectores.</p>

        <!-- Sort and priority filter -->
        <div class="d-flex flex-wrap align-items-center justify-content-center gap-2 py-4">

            <div class="me-2">Selecciona el Usuario :</div>
            <select @bind="selectedUserId" class="form-select w-auto rounded" aria-label="User options">
                @foreach (var user in users)
                {
                    <option value="@user.Id">@user.Name</option>
                }
            </select>

            <div class="me-2">Selecciona el Rol :</div>
            <select @bind="selectedRoleId" class="form-select w-auto rounded" aria-label="Role options">
                @foreach (var role in roles)
                {
                    <option value="@role.Id">@role.Description</option>
                }
            </select>

            <button @onclick="AssignRoleToUser" class="btn btn-light rounded">Asignar</button>
            <button @onclick="() => NavigateToUserRoleEdit(0)" class="btn btn-light">Editar</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @errorMessage
                </div>
            }
        </div>
    </div>
</div>


@code {
    private int selectedUserId;
    private int selectedRoleId;

    private List<GetUserDto> users;
    private List<GetRoleDto> roles;

    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsers();
        roles = await RoleService.GetRoles();
    }

    private async Task AssignRoleToUser()
    {
        try
        {
            await UserRoleService.AddUserRoleAsync(selectedUserId, selectedRoleId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void NavigateToUserRoleEdit(int Id)
    {
        NavigationManager.NavigateTo("/Security/EditUserRole/" + Id);
    }
    
    // private async Task UpdateUsersAndRolesAsync()
    // {
    //     users = await UserService.GetUsers();
    //     roles = await RoleService.GetRoles();
    //     foreach (var user in users)
    //     {
    //         user.Roles = await UserRoleService.GetRolesByUserIdAsync(user.Id);
    //     }
    // }
}