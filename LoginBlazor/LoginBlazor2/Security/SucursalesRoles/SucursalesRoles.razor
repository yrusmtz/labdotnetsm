@page "/security/SucursalesRoles"
@using LoginBlazor2.Security.Services
@inject RoleService RoleService
@inject SucursalRoleService SucursalRoleService
@using LoginShared.Security.DTOs
@using LoginBlazor2.Security.Services


<div class="content__header content__boxed rounded-0 blue-background">
    <div class="content__wrap">

        <!-- Project name and information -->
        <h1 class="page-title d-flex flex-wrap align-items-center justify-content-center mb-2 mt-4">Asignar Roles a Sucursales</h1>
        <p class="text-center">Asigne un rol a una sucursal específica utilizando los siguientes selectores.</p>

        <!-- Sort and priority filter -->
        <div class="d-flex flex-wrap align-items-center justify-content-center gap-2 py-4">

            <div class="me-2">Selecciona la Sucursal :</div>
            <select @bind="selectedSucursalId" class="form-select w-auto rounded" aria-label="Sucursal options">
                @foreach (var sucursal in sucursales)
                {
                    <option value="@sucursal.Id">@sucursal.Descripcion</option>
                }
            </select>

            <div class="me-2">Selecciona el Rol :</div>
            <select @bind="selectedRoleId" class="form-select w-auto rounded" aria-label="Role options">
                @foreach (var role in roles)
                {
                    <option value="@role.Id">@role.Description</option>
                }
            </select>

            <button @onclick="AddSucursalRole" class="btn btn-light rounded">Asignar</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @errorMessage
                </div>
            }
        </div>
    </div>
</div>

 <div class="card">
        <div class="card-body">

            <table class="table table-striped">
                <thead>
                <tr>
                    <th scope="col">Sucursal</th>
                    <th scope="col">Rol</th>
                </tr>
                </thead>
                <tbody>
                @foreach(var rol in roles)
                {
                    <tr>
                        <td>@rol.Description</td>
                        <td>
                            @foreach (GetSucursalDto sucursal in sucursalByRole.FirstOrDefault(r => r.Role.Id == rol.Id).Sucursales ?? new List<GetSucursalDto>())

                    {
                        <span class="badge bg-primary rounded-pill g-3">
                            @sucursal.Descripcion
                        </span>
                    }
                        </td>
                
                        </tr> 
                }
                </tbody>
            </table>
        </div>
    </div>



@code {
    
    private int selectedRoleId;
    private int selectedSucursalId;
    private List<GetRoleDto> roles;
    private List<GetSucursalDto> sucursales;

    private string errorMessage = string.Empty;
    private List<SucursalByRole> sucursalByRole = new List<SucursalByRole>();
    

    public class SucursalByRole
    {
        public SucursalByRole(GetRoleDto role, List<GetSucursalDto> sucursales)
        {
            Role = role;
            Sucursales = sucursales;
        }
    
        public GetRoleDto Role { get; set; } 
        public List<GetSucursalDto> Sucursales { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        sucursales = await SucursalRoleService.GetSucursales();
        roles = await RoleService.GetRoles();
        await GetSucursalByRole();
    }
    async Task GetSucursalByRole()
    {
        @foreach(GetRoleDto role in roles)
        {
            List<GetSucursalDto> sucursalesDtos = await SucursalRoleService.GetSucursalesByRole(role.Id);
            sucursalByRole.Add(new SucursalByRole(role, sucursalesDtos));
        }
    }

    private async Task AddSucursalRole()
    {
        try
        {
            await SucursalRoleService.AddSucursalRole(selectedSucursalId, selectedRoleId);
            await GetSucursalByRole();
           
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

 
}