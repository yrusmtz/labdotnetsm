@page "/security/PatrocinadorRoles"
@inject RoleService RoleService
@inject PatrocinadorRoleService PatrocinadorRoleService

@using LoginShared.Security.DTOs
@using LoginBlazor2.Security.Services
@using Microsoft.EntityFrameworkCore

<div class="content__header content__boxed rounded-0 blue-background">
    <div class="content__wrap">

        <!-- Project name and information -->
        <h1 class="page-title d-flex flex-wrap align-items-center justify-content-center mb-2 mt-4">Asignar Roles a Patrocinador</h1>
        <p class="text-center">Asigne un rol a un patrocinador específico utilizando los siguientes selectores.</p>

        <!-- Sort and priority filter -->
        <div class="d-flex flex-wrap align-items-center justify-content-center gap-2 py-4">

            <div class="me-2">Selecciona el Patrocinador :</div>
            <select @bind="selectedPatrocinadorId" class="form-select w-auto rounded" aria-label="Patrocinador options">
                @foreach (var patrocinador in patrocinadores)
                {
                    <option value="@patrocinador.Id">@patrocinador.Descripcion</option>
                }
            </select>

            <div class="me-2">Selecciona el Rol :</div>
            <select @bind="selectedRoleId" class="form-select w-auto rounded" aria-label="Role options">
                @foreach (var role in roles)
                {
                    <option value="@role.Id">@role.Description</option>
                }
            </select>

            <button @onclick="AddPatrocinadorRole" class="btn btn-light rounded">Asignar</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                    @errorMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
        </div>
    </div>
</div>


<div class="card">
    <div class="card-body">

        <table class="table table-striped">
            <thead>
            <tr>
                <th scope="col">Patrocinador</th>
                <th scope="col">Rol</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var assignment in asignaciones)
            {
                <tr>
                    <td>@assignment.Item1.Descripcion</td>
                    <td>@assignment.Item2.Description</td>
                </tr>
            }
            </tbody>
            @* <td> *@
            @*     <button class="btn btn-danger" @onclick="Eliminar">Eliminar</button> *@
            @* *@
            @* *@
            @* </td> *@

        </table>
    </div>
</div>

@code {
    private int selectedPatrocinadorId;
    private int selectedRoleId;
    private List<GetRoleDto> roles;
    private List<GetPatrocinadorDto> patrocinadores;
    private List<Tuple<GetPatrocinadorDto, GetRoleDto>> asignaciones = new List<Tuple<GetPatrocinadorDto, GetRoleDto>>();

    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        patrocinadores = await PatrocinadorRoleService.GetPatrocinadores();
        roles = await RoleService.GetRoles();
    }

    private async Task AddPatrocinadorRole()
    {
        try
        {
            await PatrocinadorRoleService.AddPatrocinadorRole(selectedPatrocinadorId, selectedRoleId);
            var patrocinador = patrocinadores.First(p => p.Id == selectedPatrocinadorId);
            var rol = roles.First(r => r.Id == selectedRoleId);
            asignaciones.Add(Tuple.Create(patrocinador, rol));
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Hubo un problema al contactar al servidor ({ex.StatusCode}): {ex.Message}";
        }
        catch (DbUpdateException ex)
        {
            errorMessage = $"Hubo un problema al actualizar la base de datos: {ex.Message}";
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = $"Ocurrió un error: {ex.Message} Por favor, intente de nuevo.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Ha ocurrido un error desconocido: {ex.Message}";
        }
    }
    
    // private async Task Eliminar()
    // {
    //     try
    //     {
    //         await PatrocinadorRoleService.DeletePatrocinadorRole(selectedPatrocinadorId, selectedRoleId);
    //     }
    //     catch (Exception ex)
    //     {
    //         errorMessage = $"Error: {ex.Message}";
    //     }
    //
    //     await GetrolesByUser();
    // }

    // private async Task GetrolesByUser()
    // {
    //     try
    //     {
    //         var roles = await PatrocinadorRoleService.GetRolesByPatrocinador(selectedPatrocinadorId);
    //         var patrocinador = patrocinadores.First(p => p.Id == selectedPatrocinadorId);
    //         asignaciones = roles.Select(r => Tuple.Create(patrocinador, r)).ToList();
    //     }
    //     catch (Exception ex)
    //     {
    //         errorMessage = $"Error: {ex.Message}";
    //     }
    // }
}