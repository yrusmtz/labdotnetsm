@page "/login"
@using BootstrapBlazor.Components
@using System.IdentityModel.Tokens.Jwt
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text.Json
@using System.Text
@using Console = System.Console
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Login</h3>


<div class="content__boxed w-100 min-vh-100 d-flex flex-column align-items-center justify-content-center">
    <div class="content__wrap">
        <div class="card shadow-lg">
            <div class="card-body">
                <div class="text-center">
                    <h1 class="h3">AURORA</h1>
                    <p>Inicia sesión en tu cuenta</p>
                </div>
                <EditForm Model="@loginForm" OnValidSubmit="HandleValidSubmit" FormName="loginForm">
                    <div class="mb-3">
                        <InputText id="username" @bind-Value="loginForm.Email" class="form-control" placeholder="Usuario" autofocus/>
                    </div>

                    <div class="mb-3">
                        <InputText id="password" @bind-Value="loginForm.Password" class="form-control" placeholder="Contraseña"/>
                    </div>

                    <div class="d-grid mt-5">
                        <button type="submit" class="btn btn-primary btn-lg">Continuar</button>
                    </div>

                    @if (!string.IsNullOrEmpty(loginForm.ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            @loginForm.ErrorMessage
                        </div>
                    }
                </EditForm>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
                <div class="d-flex justify-content-between mt-4">
                    <a href="#" class="btn-link text-decoration-none">Olvidaste tu contraseña </a>
                    <a href="#" class="btn-link text-decoration-none">Crear contraseña</a>
                </div>

            </div>
        </div>
        <div class="d-flex align-items-center justify-content-center gap-3 mt-4">
            <button type="button" onclick="window.history.back()" class="btn btn-light">Volver</button>
            <a href="/" class="btn btn-primary">Regresar Home</a>
        </div>
    </div>
</div>


@code {

    private class LoginFormModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string ErrorMessage { get; set; }
    }

    private string errorMessage = string.Empty;
    private LoginFormModel loginForm = new LoginFormModel();
    private JwtSecurityToken jwtToken = null;

    private async Task HandleValidSubmit()
    {
        var loginRequest = new 
        { 
            Email = loginForm.Email, 
            Password = loginForm.Password 
        };
        var data = new StringContent(JsonSerializer.Serialize(loginRequest), Encoding.UTF8, "application/json");

        var response = await Http.PostAsync("/auth/login", data);

        if (!response.IsSuccessStatusCode)
        {
            // Mostrar un error al usuario en caso de que las credenciales sean incorrectas, etc.
            errorMessage = "Contraseña Incorrecta. Por favor, inténtalo de nuevo.";
            return;
        }

        var responseContent = await response.Content.ReadAsStringAsync();
        var responseBody = JsonSerializer.Deserialize<Dictionary<string, string>>(responseContent);

        if (!responseBody.TryGetValue("accessToken", out string token))
        {
            // Mostrar algún error en caso de no poder obtener el token
            errorMessage = "Hubo un problema iniciando sesión. Por favor, inténtalo de nuevo.";
            return;
        }

        // jwtToken es una variable global donde almacenaremos el token
        jwtToken = new JwtSecurityToken(token);

        // Guardamos el token en el local storage
        await localStorage.SetItemAsync("authToken", token);
    
        // Almacenar la información del usuario en LocalStorage
        var user = new { Email = loginForm.Email, Name = "User Name" };
        var userJson = JsonSerializer.Serialize(user);
        await localStorage.SetItemAsync("user", userJson);

        // Aquí puedes manejar la navegación de acuerdo a si la autenticación fue exitosa
        NavigationManager.NavigateTo("/users");
    }
}
